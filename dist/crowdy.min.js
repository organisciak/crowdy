/*! crowdy - v0.4.0 - 2015-08-13
* Copyright (c) 2015 Peter Organisciak; Licensed NCSA */
!function() {
    var a = angular.module("crowdy", [ "ngRoute", "ngSanitize", "crowdy.directives", "wu.masonry", "ui.bootstrap" ]);
    a.config([ "$logProvider", function(a) {
        a.debugEnabled(!0);
    } ]);
}(), function() {
    angular.module("crowdy").config([ "$routeProvider", function(a) {
        a.when("/tag/:design", {
            template: '<div ng-include="include"></div>',
            controller: "tagTaskController",
            controllerAs: "task"
        }).when("/grok", {
            templateUrl: "templates/grokking/index.html",
            controller: "grokTaskController",
            controllerAs: "task"
        }).when("/relevance/:design", {
            template: '<div ng-include="include"></div>',
            controller: "relevanceTaskController",
            controllerAs: "task"
        }).otherwise({
            redirectTo: "/tag/basic"
        });
    } ]);
}(), function() {
    angular.module("crowdy").filter("secondsToDateTime", function() {
        return function(a) {
            var b = new Date(0, 0, 0, 0, 0, 0, 0);
            return b.setSeconds(a), b;
        };
    }), angular.module("crowdy").filter("intSuffix", function() {
        var a = [ "th", "st", "nd", "rd" ];
        return function(b) {
            b = parseInt(b);
            var c = 3 >= b ? a[b] : a[0];
            return b + c;
        };
    });
}(), function() {
    var a = angular.module("crowdy.directives", []);
    a.directive("taggingInstructions", function() {
        return {
            restrict: "E",
            templateUrl: "templates/tagging/instructions.html"
        };
    }), a.directive("relevanceInstructions", function() {
        return {
            restrict: "E",
            templateUrl: "templates/relevance/instructions.html"
        };
    }), a.directive("focusMe", [ "$timeout", function(a) {
        return {
            scope: {
                trigger: "@focusMe"
            },
            link: function(b, c) {
                b.$watch("trigger", function(b) {
                    "true" === b && a(function() {
                        c[0].focus();
                    });
                });
            }
        };
    } ]), a.directive("grokkingInstructions", function() {
        return {
            restrict: "E",
            templateUrl: "templates/grokking/instructions.html",
            controller: function() {
                this.details = {
                    title: "Guess a person's opinion!",
                    preview: !1,
                    timeEstimate: "10000 min"
                };
            },
            controllerAs: "instructions"
        };
    }), a.directive("feedbackForm", function() {
        return {
            restrict: "E",
            templateUrl: "templates/feedbackform.html"
        };
    }), a.directive("tagItem", function() {
        return {
            restrict: "E",
            templateUrl: "templates/tagging/image-tag-slip.html"
        };
    }), a.directive("relevanceItem", function() {
        return {
            restrict: "E",
            templateUrl: "templates/relevance/image-relevance-slip.html"
        };
    }), a.directive("relevanceTraining", function() {
        return {
            restrict: "E",
            templateUrl: "templates/relevance/training.html"
        };
    }), a.directive("taggingTraining", function() {
        return {
            restrict: "E",
            templateUrl: "templates/tagging/training.html"
        };
    }), a.directive("performanceFeedback", function() {
        return {
            restrict: "E",
            templateUrl: "templates/performance-feedback.html"
        };
    }), a.directive("grokImage", function() {
        return {
            restrict: "E",
            templateUrl: "templates/grokking/image-grok-slip.html"
        };
    }), a.directive("likeRating", function() {
        return {
            restrict: "E",
            templateUrl: "templates/grokking/like-rating.html"
        };
    });
}(), function() {
    angular.module("crowdy").controller("instructionsController", [ "$scope", function(a) {
        a.tab = "instruct", a.setTab = function(b) {
            a.tab = b;
        };
    } ]);
}(), angular.module("crowdy").controller("ModalInstanceCtrl", [ "$scope", "$modalInstance", "opts", function(a, b, c) {
    a.opts = {
        show: {
            ok: !1,
            cancel: !1,
            close: !0
        },
        title: "There was an error!",
        message: null
    }, angular.extend(a.opts, c), c.performanceFeedback && (a.performanceFeedback = c.performanceFeedback), 
    c.training && (a.training = c.training), a.ok = function() {
        b.dismiss("ok");
    }, a.close = function() {
        b.dismiss("cancel");
    };
} ]), angular.module("crowdy").controller("basicSiblingController", [ "$scope", "$log", function(a, b) {
    a.p.conditionalPostLoadPrep = function(c) {
        c.timer && b.warn("Ignoring timer for basic condition."), c.itemTimeEstimate ? a.time.estimate = Math.round(10 * c.itemTimeEstimate * a.taskset.tasks.length) / 10 : a.time.estimate = 210;
    };
} ]), angular.module("crowdy").controller("fastSiblingController", [ "$scope", "$log", "$routeParams", function(a, b, c) {
    a.time.limit = null, a.time.left = null;
    var d = [ "instructions", "tasks", "feedback" ];
    a.phase = d.shift(), a.nextPhase = function() {
        return 0 === d.length ? void b.error("Something went wrong: finished all phases and tried to keep going.") : (b.info("Switching phase from " + a.phase + " to " + d[0]), 
        a.phase = d.shift(), void ("feedback" === a.phase && (a.submitBlocked = !0, setTimeout(function() {
            a.submitBlocked = !1, a.$apply();
        }, 1100), a.forms.turkForm.$invalid ? (a.taskset.tasks.pop(), a.$apply(), a.forms.turkForm.$invalid && _.each(a.forms.itemForms, function(a) {
            a.$setValidity("required", !0), a.$setValidity("pattern", !0), a.contrib.$setValidity("required", !0), 
            a.contrib.$setValidity("pattern", !0);
        })) : f())));
    }, a.pushStagedTask = function() {
        if ("fast" !== a.design && b.error("pushing staged task is meant for fast design."), 
        !a.forms.turkForm.$valid) return void (a.forms.turkForm.check = !0);
        if (0 === a.stagingTasks.length) return b.warn("No more tasks left!"), void a.nextPhase();
        f(), a.forms.turkForm.check = !1;
        var c = a.stagingTasks.shift();
        a.taskset.tasks.push(c);
    };
    var e = function(a) {
        return Math.floor((new Date() - a) / 1e3);
    };
    a.startTimer = function() {
        var c = new Date(), d = setInterval(function() {
            return a.time.left = a.time.limit - e(c), "feedback" === a.phase ? void clearInterval(d) : (a.$apply(), 
            void (a.time.left <= 0 && (clearInterval(d), a.nextPhase(), b.debug(a))));
        }, 1e3);
    };
    var f = function() {
        var b = a.completedItems();
        if (!b && !a.bonusStructure.items) return 0;
        var c = a.bonusStructure.items;
        b < c.length ? a.nextItemBonus = c[b] : a.nextItemBonus = _.last(c);
        var d = _.reduce(_.take(c, b), _.add);
        b > c.length && (d += (b - c.length) * _.last(c)), a.taskset.bonus = _.round(d, 2), 
        a.bonusStructure.laterTask && a.taskset.meta.countUserHIT >= 1 && (a.taskset.bonus += a.bonusStructure.laterTask);
    };
    a.p.conditionalPostLoadPrep = function(d) {
        return a.stagingTasks = d.taskset.tasks, a.taskset.tasks = [ a.stagingTasks.shift() ], 
        c.timer && (b.log("Using Turk-supplied timer"), d.timer = c.timer), d.timer ? (d.itemTimeEstimate && b.warn("Ignoring time.estimate for fast condition, using timer."), 
        a.time.limit = d.timer, a.time.left = a.time.limit, void (a.time.estimate = a.time.limit)) : (b.error("No timer info provided for fast condition."), 
        void a.openModal({
            show: {
                ok: !1
            },
            title: "We made an error!",
            message: "Something broke. It was our fault, sorry!"
        }));
    };
} ]), angular.module("crowdy").controller("taskController", [ "$rootScope", "$scope", "$routeParams", "$modal", "$log", "$sce", "$controller", "$http", function(a, b, c, d, e, f, g, h) {
    if (a.debug = c.debug, b.BACKEND_SERVER = ".", b.taskset = {}, b.taskset.tasks = [], 
    b.forms = {}, b.condition = null, b.allChecked = null, b.performanceFeedback = null, 
    b.time = {
        estimate: null
    }, b.p = {}, b.design = c.design, b.preview = "ASSIGNMENT_ID_NOT_AVAILABLE" === c.assignmentId, 
    b.assignmentId = c.assignmentId, "fast" === b.design ? g("fastSiblingController", {
        $scope: b
    }) : "basic" === b.design && g("basicSiblingController", {
        $scope: b
    }), !(a.debug || c.turkSubmitTo || b.preview)) return e.error("No turkSubmitTo, but not in debug or preview!."), 
    void b.openModal({
        message: "Something wrong with Turk URL. Don't continue this task because payment might not go through!"
    });
    a.debug ? b.formSubmitTo = null : b.formSubmitTo = f.trustAsResourceUrl(c.turkSubmitTo + "/mturk/externalSubmit"), 
    b.openModal = function(a) {
        d.open({
            animation: !0,
            templateUrl: "templates/modal.html",
            controller: "ModalInstanceCtrl",
            backdrop: "static",
            size: "lg",
            resolve: {
                opts: function() {
                    return a;
                }
            }
        });
    }, b.completedItems = function() {
        var a = (b.taskset.tasks || []).length - (b.forms.turkForm.$error.pattern || []).length - (b.forms.turkForm.$error.required || []).length;
        return a;
    }, b.strikethrough = function(a) {
        return a ? {
            "text-decoration": "line-through"
        } : void 0;
    }, b.pressEnter = function(a) {
        "fast" === b.design && 13 === a.keyCode && (e.info("Enter pressed. Pushing next task, if valid."), 
        b.forms.turkForm.$commitViewValue(), b.pushStagedTask());
    };
    var i = function(c, d) {
        return a.debug ? void e.warn("Not POSTing to Amazon when debugging.") : (b.hiddenErrors = d, 
        void angular.element("#turkHiddenForm").submit());
    };
    b.p.conditionalPostLoadPrep || (b.p.conditionalPostLoadPrep = function() {
        e.error("No conditionalPostLoadPrep defined.");
    }), b.p.loadTaskSuccess = function(c) {
        if (c.status && 500 === c.status) return a.error = !0, void b.openModal({
            show: {
                ok: !1
            },
            title: "Error",
            message: c.message
        });
        if (0 === c.taskset.tasks.length && (a.error = "No tasks", b.openModal({
            show: {
                ok: !1
            },
            title: "Out of tasks :(",
            message: "Sorry, we ran out of tasks that are available at the moment.<br/>We're really sorry about that, we know it sucks."
        })), b.taskset = c.taskset, b.taskset.payment = c.payment.base, b.bonusStructure = c.payment.bonus, 
        b.condition = c.condition, c.performanceFeedback) {
            var e = c.performanceFeedback;
            e.scale = {
                performance: 100 * (e.worker.performance / (e.max - e.min)),
                rank: 100 * e.worker.rank / e.numWorkers
            }, e.percentile = Math.round(e.scale.rank), b.performanceFeedback = e, d.open({
                animation: !0,
                templateUrl: "templates/performance-modal.html",
                controller: "ModalInstanceCtrl",
                backdrop: "static",
                size: "lg",
                resolve: {
                    opts: function() {
                        return {
                            performanceFeedback: e
                        };
                    }
                }
            });
        }
        b.taskset.bonus = 0, b.nextItemBonus = 0, b.bonusStructure.laterTask && b.taskset.meta.countUserHIT >= 1 && (b.taskset.bonus += b.bonusStructure.laterTask), 
        b.p.conditionalPostLoadPrep(c), (b.p.taskTypePostLoadPrep || function() {})(c);
    }, b.p.loadTaskError = function(c) {
        a.error = !0;
        var d, e;
        "message" in c ? (e = "Error", d = c.message) : (e = "Unknown error.", d = "Sorry, an unknown error occurred. We don't know what happened"), 
        b.openModal({
            show: {
                ok: !1
            },
            title: e,
            message: d
        });
    }, b.submitForm = function() {
        ("fast" !== b.design || "feedback" === b.phase) && ("training" !== b.condition || (b.allChecked = _.every(b.taskset.tasks, {
            checked: !0
        }), b.allChecked !== !1)) && (b.forms.turkForm.$valid ? h.post(b.BACKEND_SERVER + "/save/hit", b.taskset).success(function(a) {
            i(a, null);
        }).error(function(a) {
            b.taskset.err = a, i(b.taskset, a);
        }) : a.$broadcast("masonry.reload"));
    };
} ]), function() {
    angular.module("crowdy").controller("tagTaskController", [ "$controller", "$http", "$log", "$scope", "$rootScope", "$routeParams", function(a, b, c, d, e, f) {
        d.instructions = {
            title: "Assign word labels ('tags') to describe images"
        }, a("taskController", {
            $scope: d
        }), d.include = "/templates/tagging/" + f.design + "-index.html", d.type = "tagging";
        var g, h = {
            callback: "JSON_CALLBACK",
            user: d.preview ? "PREVIEWUSER" : f.workerId,
            taskset_id: d.preview ? "TEST" : f.assignmentId,
            hit_id: f.hit_id,
            turk_hit_id: f.hitId,
            assignment_id: f.assignmentId,
            lock: !d.preview
        };
        g = f.debugHIT ? "data/debug-" + d.design + "-image-hit.json" : d.BACKEND_SERVER + "/hit", 
        d.p.taskTypePostLoadPrep = function(a) {
            if (a.training && !d.preview) {
                d.training = !0;
                var b = _.reduce(a.training.answers, function(a, b) {
                    return a[b.item] = b.answer, a;
                }, {});
                d.taskset.tasks = _.map(d.taskset.tasks, function(a) {
                    return a.answer = b[a.item.id], a;
                });
                var c = "";
                d.bonusStructure.firstTask && (c = " Because training is a bit slower, we'll give you a " + d.bonusStructure.firstTask + " bonus."), 
                d.openModal({
                    show: {
                        ok: !0,
                        close: !1
                    },
                    title: "First task!",
                    message: "Since this if your first task, we'll give you the answers. After every contribution, click 'Check Answer' to see if you did it correctly. Have fun, and we hope you do more tasks where we <em>don't</em> know the answer!" + c
                });
            }
        }, b.jsonp(g, {
            params: h
        }).success(d.p.loadTaskSuccess).error(d.p.loadTaskError);
    } ]);
}(), function() {
    angular.module("crowdy").controller("tagTaskItemController", [ "$http", "$log", "$scope", "$rootScope", function(a, b, c, d) {
        var e;
        c.$watch("tags", function(a, b) {
            a !== b && d.$broadcast("masonry.reload");
        }), c.tooltip = function(a) {
            return "<em>Title: </em><strong>" + a.meta.title + "</strong><br/><em>Description: </em>" + a.meta.description;
        }, c.timeStart = function(a) {
            a.timing || (a.timing = new Date());
        }, c.timeStop = function(a) {
            a.timing && (e = (new Date() - a.timing) / 1e3, a.timeSpent += e, delete a.timing);
        }, c.checkAnswer = function(a) {
            var b = function(b) {
                var c = _.find([ "poor", "ok", "good", "great" ], function(c) {
                    return a.answer.tags[c].indexOf(b.toLowerCase()) >= 0;
                });
                return c || "unknown";
            };
            a.checked = !0, c.message = "", c.choice = a.contribution.tags;
            var e = _.map(c.choice, b);
            if (_.every(e, function(a) {
                return "unknown" === a;
            })) c.message = "We're not sure about those tags, we haven't seen them before."; else for (var f = 0; f < a.contribution.tags.length; f++) "unknown" !== e[f] && (c.message = c.message + "'" + a.contribution.tags[f] + "' is a " + e[f] + " tag. ");
            c.bestAnswer = "test", d.$broadcast("masonry.reload");
        };
    } ]);
}(), function() {
    angular.module("crowdy").controller("relevanceTaskController", [ "$controller", "$http", "$log", "$scope", "$rootScope", "$routeParams", "$modal", function(a, b, c, d, e, f, g) {
        d.instructions = {
            title: "Judge if an image is relevance to a web search",
            meta: null
        }, a("taskController", {
            $scope: d
        }), d.include = "/templates/relevance/" + f.design + "-index.html", d.judgeOptions = [ "Very Relevant", "Somewhat Relevant", "Not Relevant" ], 
        d.type = "relevance";
        var h, i = {
            callback: "JSON_CALLBACK",
            user: d.preview ? "PREVIEWUSER" : f.workerId,
            taskset_id: d.preview ? "TEST" : f.assignmentId,
            hit_id: f.hit_id,
            turk_hit_id: f.hitId,
            assignment_id: f.assignmentId,
            lock: !d.preview
        };
        h = f.debugHIT ? "data/debug-" + d.design + "-image-hit.json" : d.BACKEND_SERVER + "/hit", 
        d.p.taskTypePostLoadPrep = function(a) {
            if (d.instructions.title = "Judge if an image is relevance to a web search for '" + a.taskset.facet.meta.query + "'", 
            d.instructions.meta = a.taskset.facet.meta, "training2" === a.condition && g.open({
                animation: !0,
                templateUrl: "templates/training-modal.html",
                controller: "ModalInstanceCtrl",
                backdrop: "static",
                size: "lg",
                resolve: {
                    opts: function() {
                        return {
                            training: a.taskset.facet.meta
                        };
                    }
                }
            }), a.training && !d.preview) {
                d.training = !0;
                var b = _.reduce(a.training.answers, function(a, b) {
                    return b.answer.probs = _.map(b.answer.probability, function(a, b) {
                        return {
                            choice: b,
                            prob: a
                        };
                    }), a[String(b.item)] = b.answer, a;
                }, {});
                d.taskset.tasks = _.map(d.taskset.tasks, function(a) {
                    return a.answer = b[a.item.id], a;
                }), d.openModal({
                    show: {
                        ok: !0,
                        close: !1
                    },
                    title: "First task!",
                    message: "Since this if your first task, we'll give you the answers. After every contribution, click 'Check Answer' to see if you did it correctly. Have fun, and we hope you do more tasks where we <em>don't</em> know the answer!"
                });
            }
        }, b.jsonp(h, {
            params: i
        }).success(d.p.loadTaskSuccess).error(d.p.loadTaskError);
    } ]);
}(), function() {
    angular.module("crowdy").controller("relevanceTaskItemController", [ "$http", "$log", "$scope", "$rootScope", function(a, b, c, d) {
        var e;
        c.tooltip = function(a) {
            return "<em>Title: </em><strong>" + a.meta.title + "</strong><br/><em>Description: </em>" + a.meta.description;
        }, c.timeStart = function(a) {
            a.timing || (a.timing = new Date());
        }, c.timeStop = function(a) {
            a.timing && (e = (new Date() - a.timing) / 1e3, a.timeSpent += e, delete a.timing);
        }, c.checkAnswer = function(a) {
            a.checked = !0, c.choice = a.contribution.relevance[0], c.bestAnswer = _.max(a.answer.probs, "prob").choice, 
            d.$broadcast("masonry.reload");
        };
    } ]);
}(), function() {
    angular.module("crowdy").controller("feedbackCtrl", [ "$scope", function(a) {
        a.message1 = "", a.getMsg = function(a, b) {
            var c = {
                satisfy: [ "I hated it.", "I didn't like it", "It was OK", "It was great", "I loved it" ],
                pay: [ "Way too low.", "Lower than I'd like", "It was OK", "Better than usual", "Much better than usual" ]
            };
            return c[b][a - 1];
        };
    } ]);
}();