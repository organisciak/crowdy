/*! crowdy - v0.0.2 - 2015-07-11
* Copyright (c) 2015 Peter Organisciak; Licensed NCSA */
!function() {
    angular.module("crowdy", [ "ngRoute", "ngSanitize", "crowdy.directives", "wu.masonry", "ui.bootstrap" ]);
}(), function() {
    angular.module("crowdy").config([ "$routeProvider", function(a) {
        a.when("/tag/:condition", {
            template: '<div ng-include="include"></div>',
            controller: "tagTaskController",
            controllerAs: "task"
        }).when("/grok", {
            templateUrl: "templates/grokking/index.html",
            controller: "grokTaskController",
            controllerAs: "task"
        }).when("/relevance", {
            templateUrl: "templates/relevance/index.html"
        }).otherwise({
            redirectTo: "/tag/basic"
        });
    } ]);
}(), function() {
    var a = angular.module("crowdy.directives", []);
    a.directive("taggingInstructions", function() {
        return {
            restrict: "E",
            templateUrl: "templates/tagging/instructions.html",
            controller: function() {
                this.details = b;
            },
            controllerAs: "instructions"
        };
    }), a.directive("grokkingInstructions", function() {
        return {
            restrict: "E",
            templateUrl: "templates/grokking/instructions.html",
            controller: function() {
                this.details = {
                    title: "Guess a person's opinion!",
                    preview: !1,
                    timeEstimate: "10000 min"
                };
            },
            controllerAs: "instructions"
        };
    }), a.directive("feedbackForm", function() {
        return {
            restrict: "E",
            templateUrl: "templates/feedbackform.html"
        };
    }), a.directive("tagItem", function() {
        return {
            restrict: "E",
            templateUrl: "templates/tagging/image-tag-slip.html"
        };
    }), a.directive("performanceFeedback", function() {
        return {
            restrict: "E",
            templateUrl: "templates/performance-feedback.html"
        };
    }), a.directive("grokImage", function() {
        return {
            restrict: "E",
            templateUrl: "templates/grokking/image-grok-slip.html"
        };
    }), a.directive("likeRating", function() {
        return {
            restrict: "E",
            templateUrl: "templates/grokking/like-rating.html"
        };
    });
    var b = {
        title: "Assign word labels ('tags') to describe images",
        preview: !1,
        timeEstimate: "3.5 minutes"
    };
}(), function() {
    angular.module("crowdy").controller("instructionsController", [ "$scope", function(a) {
        a.tab = "instruct", a.setTab = function(b) {
            a.tab = b;
        };
    } ]);
}(), angular.module("crowdy").controller("ModalInstanceCtrl", [ "$scope", "$modalInstance", "opts", function(a, b, c) {
    a.opts = {
        show: {
            ok: !1,
            cancel: !1,
            close: !0
        },
        title: null,
        message: null
    }, angular.extend(a.opts, c), a.ok = function() {
        b.dismiss("ok");
    }, a.close = function() {
        b.dismiss("cancel");
    };
} ]), function() {
    angular.module("crowdy").controller("tagTaskController", [ "$http", "$sce", "$httpParamSerializerJQLike", "$log", "$modal", "$scope", "$rootScope", "$routeParams", function(a, b, c, d, e, f, g, h) {
        var i = ".";
        if (f.include = "/templates/tagging/" + h.condition + "-index.html", f.forms = {}, 
        f.time = {}, f.condition = h.condition, "fast" === f.condition) {
            var j = [ "instructions", "tasks", "feedback", "submit" ];
            f.phase = j.shift();
        }
        f.pressEnter = function(a) {
            13 === a.keyCode && (d.log("Enter pressed. Pushing next task, if valid."), d.log(f), 
            f.forms.turkForm.$commitViewValue(), f.pushStagedTask());
        }, f.preview = "ASSIGNMENT_ID_NOT_AVAILABLE" === h.assignmentId, f.formSubmitTo = b.trustAsResourceUrl(h.turkSubmitTo + "/mturk/externalSubmit"), 
        f.assignmentId = h.assignmentId, g.debug = h.debug, f.type = "tagging", f.taskset = {}, 
        f.taskset.tasks = [], f.openModal = function(a) {
            e.open({
                animation: !0,
                templateUrl: "templates/modal.html",
                controller: "ModalInstanceCtrl",
                backdrop: "static",
                size: "lg",
                resolve: {
                    opts: function() {
                        return a;
                    }
                }
            });
        }, f.toggleAnimation = function() {
            f.animationsEnabled = !f.animationsEnabled;
        };
        var k = function(a, b) {
            g.debug && d.warn("Not POSTing to Amazon when debugging."), f.hiddenErrors = b, 
            angular.element("#turkHiddenForm").submit();
        };
        f.nextPhase = function() {
            return 0 === j.length ? void d.error("Something went wrong: finished all phases and tried to keep going.") : (d.log("Switching phase from " + f.phase + " to " + j[0]), 
            f.phase = j.shift(), void ("feedback" === f.phase && f.$broadcast("items.forceValid")));
        }, f.pushStagedTask = function() {
            if ("fast" !== f.condition && d.error("pushing staged task is meant for fast condition."), 
            !f.forms.turkForm.$valid) return void (f.forms.turkForm.check = !0);
            0 === f.stagingTasks.length && (d.warn("No more tasks left!"), f.nextPhase()), f.forms.turkForm.check = !1;
            var a = f.stagingTasks.shift();
            f.taskset.tasks.push(a);
        };
        var l = g.debug ? 5 : 60;
        f.time.timeLeft = l;
        var m = function(a) {
            return Math.floor((new Date() - a) / 1e3);
        };
        f.startTimer = function() {
            var a = new Date(), b = setInterval(function() {
                f.time.timeLeft = l - m(a), f.$apply(), f.time.timeLeft <= 0 && (clearInterval(b), 
                f.nextPhase(), d.log(f)), console.log(f.time.timeLeft);
            }, 1e3);
        };
        var n, o = {
            callback: "JSON_CALLBACK",
            user: f.preview ? "PREVIEWUSER" : h.workerId,
            taskset_id: f.preview ? "TEST" : h.assignmentId,
            hit_id: h.hit_id,
            assignment_id: h.assignmentId,
            lock: !f.preview
        };
        n = g.debug ? "data/debug-image-hit.json" : i + "/hit", a.jsonp(n, {
            params: o
        }).success(function(a) {
            return a.status && 500 === a.status ? (g.error = !0, void f.openModal({
                show: {
                    ok: !1
                },
                title: "Error",
                message: a.message
            })) : (0 === a.taskset.tasks.length && (g.error = "No tasks", f.openModal({
                show: {
                    ok: !1
                },
                title: "Out of tasks :(",
                message: "Sorry, we ran out of tasks that are available at the moment.<br/>We're really sorry about that, we know it sucks."
            })), f.taskset = a.taskset, void ("fast" === f.condition ? (f.stagingTasks = a.taskset.tasks, 
            f.taskset.tasks = [ f.stagingTasks.shift() ]) : "basic" === f.condition || console.error("This condition is not supported.")));
        }).error(function(a) {
            g.error = !0;
            var b, c;
            "message" in a ? (c = "Error", b = a.message) : (c = "Unknown error.", b = "Sorry, an unknown error occurred. We don't know what happened"), 
            f.openModal({
                show: {
                    ok: !1
                },
                title: c,
                message: b
            });
        }), f.submitForm = function() {
            ("fast" !== f.condition || "feedback" === f.phase || "submit" === f.phase) && (f.forms.turkForm.$valid ? a.post(i + "/save/hit", f.taskset).success(function(a) {
                k(a, null);
            }).error(function(a) {
                f.taskset.err = a, k(f.taskset, a);
            }) : g.$broadcast("masonry.reload"));
        };
    } ]);
}(), function() {
    angular.module("crowdy").controller("tagTaskItemController", [ "$http", "$log", "$scope", "$rootScope", function(a, b, c, d) {
        item = this, b.log(this);
        var e;
        c.$watch("tags", function(a, b) {
            a !== b && d.$broadcast("masonry.reload");
        }), c.$on("items.forceValid", function() {
            b.log("Trying to set validity for item"), c.$setValidity("required", !0), c.$setValidity("pattern", !0), 
            b.log(c), b.log(item);
        }), c.tooltip = function(a) {
            return "<em>Title: </em><strong>" + a.meta.title + "</strong><br/><em>Description: </em>" + a.meta.description;
        }, c.timeStart = function(a) {
            a.timing || (a.timing = new Date());
        }, c.timeStop = function(a) {
            a.timing && (e = (new Date() - a.timing) / 1e3, a.timeSpent += e, delete a.timing);
        };
    } ]);
}(), function() {
    angular.module("crowdy").controller("feedbackCtrl", [ "$scope", function(a) {
        a.message1 = "", a.getMsg = function(a, b) {
            var c = {
                satisfy: [ "I hated it.", "I didn't like it", "It was OK", "It was great", "I loved it" ],
                pay: [ "Way too low.", "Lower than I'd like", "It was OK", "Better than usual", "Much better than usual" ]
            };
            return c[b][a - 1];
        };
    } ]);
}();