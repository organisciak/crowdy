/*! crowdy - v0.0.2 - 2015-07-31
* Copyright (c) 2015 Peter Organisciak; Licensed NCSA */
!function() {
    var a = angular.module("crowdy", [ "ngRoute", "ngSanitize", "crowdy.directives", "wu.masonry", "ui.bootstrap" ]);
    a.config([ "$logProvider", function(a) {
        a.debugEnabled(!0);
    } ]);
}(), function() {
    angular.module("crowdy").config([ "$routeProvider", function(a) {
        a.when("/tag/:condition", {
            template: '<div ng-include="include"></div>',
            controller: "tagTaskController",
            controllerAs: "task"
        }).when("/grok", {
            templateUrl: "templates/grokking/index.html",
            controller: "grokTaskController",
            controllerAs: "task"
        }).when("/relevance", {
            templateUrl: "templates/relevance/index.html"
        }).otherwise({
            redirectTo: "/tag/basic"
        });
    } ]);
}(), function() {
    var a = angular.module("crowdy.directives", []);
    a.directive("taggingInstructions", function() {
        return {
            restrict: "E",
            templateUrl: "templates/tagging/instructions.html",
            controller: function() {
                this.details = b;
            },
            controllerAs: "instructions"
        };
    }), a.directive("focusMe", function(a) {
        return {
            scope: {
                trigger: "@focusMe"
            },
            link: function(b, c) {
                b.$watch("trigger", function(b) {
                    "true" === b && a(function() {
                        c[0].focus();
                    });
                });
            }
        };
    }), a.directive("grokkingInstructions", function() {
        return {
            restrict: "E",
            templateUrl: "templates/grokking/instructions.html",
            controller: function() {
                this.details = {
                    title: "Guess a person's opinion!",
                    preview: !1,
                    timeEstimate: "10000 min"
                };
            },
            controllerAs: "instructions"
        };
    }), a.directive("feedbackForm", function() {
        return {
            restrict: "E",
            templateUrl: "templates/feedbackform.html"
        };
    }), a.directive("tagItem", function() {
        return {
            restrict: "E",
            templateUrl: "templates/tagging/image-tag-slip.html"
        };
    }), a.directive("performanceFeedback", function() {
        return {
            restrict: "E",
            templateUrl: "templates/performance-feedback.html"
        };
    }), a.directive("grokImage", function() {
        return {
            restrict: "E",
            templateUrl: "templates/grokking/image-grok-slip.html"
        };
    }), a.directive("likeRating", function() {
        return {
            restrict: "E",
            templateUrl: "templates/grokking/like-rating.html"
        };
    });
    var b = {
        title: "Assign word labels ('tags') to describe images",
        preview: !1,
        timeEstimate: "3.5 minutes"
    };
}(), function() {
    angular.module("crowdy").controller("instructionsController", [ "$scope", function(a) {
        a.tab = "instruct", a.setTab = function(b) {
            a.tab = b;
        };
    } ]);
}(), angular.module("crowdy").controller("ModalInstanceCtrl", [ "$scope", "$modalInstance", "opts", function(a, b, c) {
    a.opts = {
        show: {
            ok: !1,
            cancel: !1,
            close: !0
        },
        title: null,
        message: null
    }, angular.extend(a.opts, c), a.ok = function() {
        b.dismiss("ok");
    }, a.close = function() {
        b.dismiss("cancel");
    };
} ]), angular.module("crowdy").controller("basicSiblingController", [ "$scope", "$log", "$routeParams", function(a, b, c) {
    a.p.conditionalPostLoadPrep = function() {
        (c.timer || a.taskset.timer) && b.warn("Ignoring timer for basic condition.");
    };
} ]), angular.module("crowdy").controller("fastSiblingController", [ "$scope", "$log", "$routeParams", function(a, b, c) {
    a.time = {};
    var d = [ "instructions", "tasks", "feedback" ];
    a.phase = d.shift(), a.nextPhase = function() {
        return 0 === d.length ? void b.error("Something went wrong: finished all phases and tried to keep going.") : (b.info("Switching phase from " + a.phase + " to " + d[0]), 
        a.phase = d.shift(), void ("feedback" === a.phase && a.forms.turkForm.$invalid && (a.taskset.tasks.pop(), 
        a.$apply(), a.forms.turkForm.$invalid && _.each(a.forms.itemForms, function(a) {
            a.contrib.$setValidity("required", !0), a.contrib.$setValidity("pattern", !0);
        }))));
    }, a.pushStagedTask = function() {
        if ("fast" !== a.condition && b.error("pushing staged task is meant for fast condition."), 
        !a.forms.turkForm.$valid) return void (a.forms.turkForm.check = !0);
        0 === a.stagingTasks.length && (b.warn("No more tasks left!"), a.nextPhase()), a.forms.turkForm.check = !1;
        var c = a.stagingTasks.shift();
        a.taskset.tasks.push(c);
    };
    var e = function(a) {
        return Math.floor((new Date() - a) / 1e3);
    };
    a.startTimer = function() {
        var c = new Date(), d = setInterval(function() {
            a.time.timeLeft = a.timeLimit - e(c), a.$apply(), a.time.timeLeft <= 0 && (clearInterval(d), 
            a.nextPhase(), b.debug(a)), b.log(a.time.timeLeft);
        }, 1e3);
    }, a.p.conditionalPostLoadPrep = function(d) {
        return a.stagingTasks = d.taskset.tasks, a.taskset.tasks = [ a.stagingTasks.shift() ], 
        c.timer && (b.log("Using Turk-supplied timer"), a.taskset.timer = c.timer), a.taskset.timer ? (c.timeEstimate && b.warn("Ignoring timeEstimate for fast condition, using timer."), 
        a.timeLimit = a.taskset.timer, void (a.time.timeLeft = a.timeLimit)) : (b.log(a.taskset), 
        b.error("No timer info provided for fast condition."), void a.openModal({
            show: {
                ok: !1
            },
            title: "We made an error!",
            message: "Something broke. It was our fault, sorry!"
        }));
    };
} ]), angular.module("crowdy").controller("taskController", [ "$rootScope", "$scope", "$routeParams", "$modal", "$log", "$sce", "$controller", "$http", function(a, b, c, d, e, f, g, h) {
    a.debug = c.debug, b.taskset = {}, b.taskset.tasks = [], b.forms = {}, b.p = {}, 
    b.condition = c.condition, b.preview = "ASSIGNMENT_ID_NOT_AVAILABLE" === c.assignmentId, 
    b.formSubmitTo = f.trustAsResourceUrl(c.turkSubmitTo + "/mturk/externalSubmit"), 
    b.assignmentId = c.assignmentId, "fast" === b.condition ? g("fastSiblingController", {
        $scope: b
    }) : "basic" === b.condition && g("basicSiblingController", {
        $scope: b
    }), b.openModal = function(a) {
        d.open({
            animation: !0,
            templateUrl: "templates/modal.html",
            controller: "ModalInstanceCtrl",
            backdrop: "static",
            size: "lg",
            resolve: {
                opts: function() {
                    return a;
                }
            }
        });
    }, b.pressEnter = function(a) {
        13 === a.keyCode && (e.info("Enter pressed. Pushing next task, if valid."), b.forms.turkForm.$commitViewValue(), 
        b.pushStagedTask());
    };
    var i = function(c, d) {
        a.debug && e.warn("Not POSTing to Amazon when debugging."), b.hiddenErrors = d, 
        angular.element("#turkHiddenForm").submit();
    };
    b.p.conditionalPostLoadPrep || (b.p.conditionalPostLoadPrep = function() {
        console.error("No conditionalPostLoadPrep defined.");
    }), b.p.loadTaskSuccess = function(c) {
        return c.status && 500 === c.status ? (a.error = !0, void b.openModal({
            show: {
                ok: !1
            },
            title: "Error",
            message: c.message
        })) : (0 === c.taskset.tasks.length && (a.error = "No tasks", b.openModal({
            show: {
                ok: !1
            },
            title: "Out of tasks :(",
            message: "Sorry, we ran out of tasks that are available at the moment.<br/>We're really sorry about that, we know it sucks."
        })), b.taskset = c.taskset, void b.p.conditionalPostLoadPrep(c));
    }, b.p.loadTaskError = function(c) {
        a.error = !0;
        var d, e;
        "message" in c ? (e = "Error", d = c.message) : (e = "Unknown error.", d = "Sorry, an unknown error occurred. We don't know what happened"), 
        b.openModal({
            show: {
                ok: !1
            },
            title: e,
            message: d
        });
    }, b.submitForm = function() {
        ("fast" !== b.condition || "feedback" === b.phase) && (b.forms.turkForm.$valid ? h.post(b.BACKEND_SERVER + "/save/hit", b.taskset).success(function(a) {
            i(a, null);
        }).error(function(a) {
            b.taskset.err = a, i(b.taskset, a);
        }) : a.$broadcast("masonry.reload"));
    };
} ]), function() {
    angular.module("crowdy").controller("tagTaskController", [ "$controller", "$http", "$log", "$scope", "$rootScope", "$routeParams", function(a, b, c, d, e, f) {
        a("taskController", {
            $scope: d
        }), d.BACKEND_SERVER = ".", d.include = "/templates/tagging/" + f.condition + "-index.html", 
        d.type = "tagging";
        var g, h = {
            callback: "JSON_CALLBACK",
            user: d.preview ? "PREVIEWUSER" : f.workerId,
            taskset_id: d.preview ? "TEST" : f.assignmentId,
            hit_id: f.hit_id,
            assignment_id: f.assignmentId,
            lock: !d.preview
        };
        g = e.debug ? "data/debug-" + d.condition + "-image-hit.json" : d.BACKEND_SERVER + "/hit", 
        b.jsonp(g, {
            params: h
        }).success(d.p.loadTaskSuccess).error(d.p.loadTaskError);
    } ]);
}(), function() {
    angular.module("crowdy").controller("tagTaskItemController", [ "$http", "$log", "$scope", "$rootScope", function(a, b, c, d) {
        var e;
        c.$watch("tags", function(a, b) {
            a !== b && d.$broadcast("masonry.reload");
        }), c.tooltip = function(a) {
            return "<em>Title: </em><strong>" + a.meta.title + "</strong><br/><em>Description: </em>" + a.meta.description;
        }, c.timeStart = function(a) {
            a.timing || (a.timing = new Date());
        }, c.timeStop = function(a) {
            a.timing && (e = (new Date() - a.timing) / 1e3, a.timeSpent += e, delete a.timing);
        };
    } ]);
}(), function() {
    angular.module("crowdy").controller("feedbackCtrl", [ "$scope", function(a) {
        a.message1 = "", a.getMsg = function(a, b) {
            var c = {
                satisfy: [ "I hated it.", "I didn't like it", "It was OK", "It was great", "I loved it" ],
                pay: [ "Way too low.", "Lower than I'd like", "It was OK", "Better than usual", "Much better than usual" ]
            };
            return c[b][a - 1];
        };
    } ]);
}();