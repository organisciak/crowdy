/*! crowdy - v0.0.2 - 2015-07-16
* Copyright (c) 2015 Peter Organisciak; Licensed NCSA */
!function() {
    var a = angular.module("crowdy", [ "ngRoute", "ngSanitize", "crowdy.directives", "wu.masonry", "ui.bootstrap" ]);
    a.config([ "$logProvider", function(a) {
        a.debugEnabled(!0);
    } ]);
}(), function() {
    angular.module("crowdy").config([ "$routeProvider", function(a) {
        a.when("/tag/:condition", {
            template: '<div ng-include="include"></div>',
            controller: "tagTaskController",
            controllerAs: "task"
        }).when("/grok", {
            templateUrl: "templates/grokking/index.html",
            controller: "grokTaskController",
            controllerAs: "task"
        }).when("/relevance", {
            templateUrl: "templates/relevance/index.html"
        }).otherwise({
            redirectTo: "/tag/basic"
        });
    } ]);
}(), function() {
    var a = angular.module("crowdy.directives", []);
    a.directive("taggingInstructions", function() {
        return {
            restrict: "E",
            templateUrl: "templates/tagging/instructions.html"
        };
    }), a.directive("focusMe", function(a) {
        return {
            scope: {
                trigger: "@focusMe"
            },
            link: function(b, c) {
                b.$watch("trigger", function(b) {
                    "true" === b && a(function() {
                        c[0].focus();
                    });
                });
            }
        };
    }), a.directive("grokkingInstructions", function() {
        return {
            restrict: "E",
            templateUrl: "templates/grokking/instructions.html",
            controller: function() {
                this.details = {
                    title: "Guess a person's opinion!",
                    preview: !1,
                    timeEstimate: "10000 min"
                };
            },
            controllerAs: "instructions"
        };
    }), a.directive("feedbackForm", function() {
        return {
            restrict: "E",
            templateUrl: "templates/feedbackform.html"
        };
    }), a.directive("tagItem", function() {
        return {
            restrict: "E",
            templateUrl: "templates/tagging/image-tag-slip.html"
        };
    }), a.directive("performanceFeedback", function() {
        return {
            restrict: "E",
            templateUrl: "templates/performance-feedback.html"
        };
    }), a.directive("grokImage", function() {
        return {
            restrict: "E",
            templateUrl: "templates/grokking/image-grok-slip.html"
        };
    }), a.directive("likeRating", function() {
        return {
            restrict: "E",
            templateUrl: "templates/grokking/like-rating.html"
        };
    });
}(), function() {
    angular.module("crowdy").controller("instructionsController", [ "$scope", function(a) {
        a.tab = "instruct", a.setTab = function(b) {
            a.tab = b;
        };
    } ]);
}(), angular.module("crowdy").controller("ModalInstanceCtrl", [ "$scope", "$modalInstance", "opts", function(a, b, c) {
    a.opts = {
        show: {
            ok: !1,
            cancel: !1,
            close: !0
        },
        title: null,
        message: null
    }, angular.extend(a.opts, c), a.ok = function() {
        b.dismiss("ok");
    }, a.close = function() {
        b.dismiss("cancel");
    };
} ]), function() {
    angular.module("crowdy").controller("tagTaskController", [ "$http", "$sce", "$httpParamSerializerJQLike", "$log", "$modal", "$scope", "$rootScope", "$routeParams", function(a, b, c, d, e, f, g, h) {
        var i = ".";
        if (f.include = "/templates/tagging/" + h.condition + "-index.html", f.forms = {}, 
        f.time = {}, f.instructions = {
            title: "Assign word labels ('tags') to describe images"
        }, f.time = {
            limit: null,
            left: null,
            estimate: null
        }, f.condition = h.condition, "fast" === f.condition) {
            var j = [ "instructions", "tasks", "feedback" ];
            f.phase = j.shift();
        }
        if (f.pressEnter = function(a) {
            13 === a.keyCode && (d.info("Enter pressed. Pushing next task, if valid."), f.forms.turkForm.$commitViewValue(), 
            f.pushStagedTask());
        }, f.preview = "ASSIGNMENT_ID_NOT_AVAILABLE" === h.assignmentId, f.assignmentId = h.assignmentId, 
        g.debug = h.debug, !(g.debug || h.turkSubmitTo || f.preview)) return d.error("No turkSubmitTo, but not in debug or preview!."), 
        void f.openModal({
            message: "Something wrong with Turk URL. Don't continue this task because payment might not go through!"
        });
        g.debug ? f.formSubmitTo = null : f.formSubmitTo = b.trustAsResourceUrl(h.turkSubmitTo + "/mturk/externalSubmit"), 
        f.type = "tagging", f.taskset = {}, f.taskset.tasks = [], f.openModal = function(a) {
            e.open({
                animation: !0,
                templateUrl: "templates/modal.html",
                controller: "ModalInstanceCtrl",
                backdrop: "static",
                size: "lg",
                resolve: {
                    opts: function() {
                        return a;
                    }
                }
            });
        }, f.toggleAnimation = function() {
            f.animationsEnabled = !f.animationsEnabled;
        };
        var k = function(a, b) {
            return g.debug ? void d.warn("Not POSTing to Amazon when debugging.") : (f.hiddenErrors = b, 
            void angular.element("#turkHiddenForm").submit());
        };
        f.nextPhase = function() {
            return 0 === j.length ? void d.error("Something went wrong: finished all phases and tried to keep going.") : (d.info("Switching phase from " + f.phase + " to " + j[0]), 
            f.phase = j.shift(), void ("feedback" === f.phase && (f.submitBlocked = !0, setTimeout(function() {
                f.submitBlocked = !1, f.$apply();
            }, 1100), f.forms.turkForm.$invalid && (f.taskset.tasks.pop(), f.$apply(), f.forms.turkForm.$invalid && _.each(f.forms.itemForms, function(a) {
                a.contrib.$setValidity("required", !0), a.contrib.$setValidity("pattern", !0);
            })))));
        }, f.pushStagedTask = function() {
            if ("fast" !== f.condition && d.error("pushing staged task is meant for fast condition."), 
            !f.forms.turkForm.$valid) return void (f.forms.turkForm.check = !0);
            if (0 === f.stagingTasks.length) return d.warn("No more tasks left!"), void f.nextPhase();
            f.forms.turkForm.check = !1;
            var a = f.stagingTasks.shift();
            f.taskset.tasks.push(a);
        };
        var l = function(a) {
            return Math.floor((new Date() - a) / 1e3);
        };
        f.startTimer = function() {
            var a = new Date(), b = setInterval(function() {
                return f.time.left = f.time.limit - l(a), "feedback" === f.phase ? void clearInterval(b) : (f.$apply(), 
                void (f.time.left <= 0 && (clearInterval(b), f.nextPhase(), d.debug(f))));
            }, 1e3);
        };
        var m, n = {
            callback: "JSON_CALLBACK",
            user: f.preview ? "PREVIEWUSER" : h.workerId,
            taskset_id: f.preview ? "TEST" : h.assignmentId,
            hit_id: h.hit_id,
            assignment_id: h.assignmentId,
            lock: !f.preview
        };
        m = h.debugHIT ? "data/debug-image-hit.json" : i + "/hit", a.jsonp(m, {
            params: n
        }).success(function(a) {
            if (a.status && 500 === a.status) return g.error = !0, void f.openModal({
                show: {
                    ok: !1
                },
                title: "Error",
                message: a.message
            });
            if (0 === a.taskset.tasks.length && (g.error = "No tasks", f.openModal({
                show: {
                    ok: !1
                },
                title: "Out of tasks :(",
                message: "Sorry, we ran out of tasks that are available at the moment.<br/>We're really sorry about that, we know it sucks."
            })), f.taskset = a.taskset, "fast" === f.condition) {
                if (f.stagingTasks = a.taskset.tasks, f.taskset.tasks = [ f.stagingTasks.shift() ], 
                !a.hit.timer) return d.error("No timer info provided for fast conditions."), void f.openModal({
                    show: {
                        ok: !1
                    },
                    title: "We made an error!",
                    message: "Something broke. It was our fault, sorry!"
                });
                a.hit.itemTimeEstimate && d.warn("Ignoring time.estimate for fast condition, using timer."), 
                f.time.limit = g.debug ? 15 : a.hit.timer, f.time.left = f.time.limit, f.time.estimate = f.time.limit;
            } else "basic" === f.condition ? a.hit.timer && (d.warn("Ignoring timer for basic condition."), 
            a.hit.itemTimeEstimate ? f.time.estimate = Math.round(10 * a.hit.itemTimeEstimate * f.taskset.tasks.length) / 10 : f.time.estimate = 210) : d.error("This condition is not supported.");
            d.log(f);
        }).error(function(a) {
            g.error = !0;
            var b, c;
            "message" in a ? (c = "Error", b = a.message) : (c = "Unknown error.", b = "Sorry, an unknown error occurred. We don't know what happened"), 
            f.openModal({
                show: {
                    ok: !1
                },
                title: c,
                message: b
            });
        }), f.submitForm = function() {
            ("fast" !== f.condition || "feedback" === f.phase) && (f.forms.turkForm.$valid ? a.post(i + "/save/hit", f.taskset).success(function(a) {
                k(a, null);
            }).error(function(a) {
                f.taskset.err = a, k(f.taskset, a);
            }) : g.$broadcast("masonry.reload"));
        };
    } ]);
}(), function() {
    angular.module("crowdy").controller("tagTaskItemController", [ "$http", "$log", "$scope", "$rootScope", function(a, b, c, d) {
        var e;
        c.$watch("tags", function(a, b) {
            a !== b && d.$broadcast("masonry.reload");
        }), c.tooltip = function(a) {
            return "<em>Title: </em><strong>" + a.meta.title + "</strong><br/><em>Description: </em>" + a.meta.description;
        }, c.timeStart = function(a) {
            a.timing || (a.timing = new Date());
        }, c.timeStop = function(a) {
            a.timing && (e = (new Date() - a.timing) / 1e3, a.timeSpent += e, delete a.timing);
        };
    } ]);
}(), function() {
    angular.module("crowdy").controller("feedbackCtrl", [ "$scope", function(a) {
        a.message1 = "", a.getMsg = function(a, b) {
            var c = {
                satisfy: [ "I hated it.", "I didn't like it", "It was OK", "It was great", "I loved it" ],
                pay: [ "Way too low.", "Lower than I'd like", "It was OK", "Better than usual", "Much better than usual" ]
            };
            return c[b][a - 1];
        };
    } ]);
}();